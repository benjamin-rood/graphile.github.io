#!/usr/bin/env node

/* eslint-disable no-console */

const fs = require("fs");
const pg = require("pg");
const fetch = require("node-fetch");
const prettier = require("prettier");
const { graphql } = require("graphql");
const child_process = require("child_process");
const {
  createPostGraphileSchema,
  withPostGraphileContext,
} = require("postgraphile");
const PgSimplifyInflectorPlugin = require("@graphile-contrib/pg-simplify-inflector");
const lowerCase = require("lodash/lowerCase");

const PgConnectionString = process.env.PG_CONN || "";

function upperFirst(str) {
  return str[0].toUpperCase() + str.substr(1);
}
function filenameToTitle(str) {
  return upperFirst(lowerCase(str.replace(/^[0-9]+_/, "")));
}

async function prettify(filepath, content) {
  const options = await prettier.resolveConfig(filepath);
  return prettier.format(content, {
    ...options,
    printWidth: 38,
    filepath,
  });
}

async function spawn(command, args, options = {}, stdin = null) {
  return new Promise((resolve, reject) => {
    console.log(command, ...args);
    const cp = child_process.spawn(command, args, {
      stdio: "pipe",
      ...options,
    });
    let stdout = "";
    let stderr = "";
    cp.stdout.on("data", data => {
      stdout += data;
    });
    cp.stderr.on("data", data => {
      stderr += data;
    });
    cp.on("error", reject);
    function fail(e) {
      e.stdout = stdout;
      e.stderr = stderr;
      console.error(stderr);
      reject(e);
    }
    cp.on("close", code => {
      if (code === 0) {
        resolve({
          stdout,
          stderr,
          code,
        });
      } else {
        const e = new Error(`Failed with status code ${code}`);
        e.code = code;
        fail(e);
      }
    });
    if (stdin) {
      cp.stdin.on("error", fail);
      cp.stdin.write(stdin);
      cp.stdin.end();
    } else {
      cp.stdin.end();
    }
  });
}

async function psql(conn, flags, sql) {
  return spawn(
    "psql",
    [conn, "-X", "-1", "-v", "ON_ERROR_STOP=1", ...flags],
    {},
    sql
  );
}

async function tryPsql(flags, sql) {
  try {
    return await psql(PgConnectionString, flags, sql);
  } catch (e) {
    // NOOP
  }
}

async function main() {
  const schemaSql = await (await fetch(
    "https://raw.githubusercontent.com/graphile/examples/master/data/schema.sql"
  )).text();
  const dataSql = await (await fetch(
    "https://raw.githubusercontent.com/graphile/examples/master/db/999_data.sql"
  )).text();
  try {
    await tryPsql(["template1",  "-c"], `DROP DATABASE graphile_org_demo`);
    // await spawn("dropdb", ["graphile_org_demo"]);
  } catch (e) {
    /* non-existence is fine */
  }

  const password = String(Math.random());
  await tryPsql(
    ["template1", "-c"],
    `CREATE ROLE graphiledemo WITH LOGIN PASSWORD '${password}' SUPERUSER`
  );
  await tryPsql(
    ["template1"],
    `CREATE ROLE graphiledemo_authenticator WITH LOGIN PASSWORD '${password}' NOINHERIT;`
  );
  await tryPsql(["template1"], `CREATE ROLE graphiledemo_visitor;`);
  await tryPsql(
    ["template1"],
    `GRANT graphiledemo_visitor TO graphiledemo_authenticator;`
  );

  // await spawn("createdb", ["-O", "graphiledemo", "graphile_org_demo"]);
  await tryPsql(["template1", "-c"], `CREATE DATABASE graphiledemo`);
  await tryPsql(["template1", "-c"], `CREATE DATABASE graphile_org_demo`);
  await psql()
  await psql(["graphile_org_demo"], schemaSql);
  await psql(["graphile_org_demo"], dataSql);
  await psql(
    ["graphile_org_demo"],
    `\
set search_path to app_public, app_private, public;
/**
 * These are the tables we're using in the insert-multiple-records example
 */
create table quiz (
  id serial primary key,
  name text not null,
  updated_at timestamptz not null default now()
);

create table quiz_entry (
  id serial primary key,
  user_id int not null references users(id),
  quiz_id int not null references quiz(id)
);

create table quiz_entry_answer (
  id serial primary key,
  quiz_entry_id int not null references quiz_entry(id),
  question text not null,
  answer int
);

/**
 * These are needed for the GraphQLFloat plugins
 */
alter table quiz add column precision_12_scale_2 numeric(12,2);
alter table quiz add column precision_200_scale_100 numeric(200,100);

/**
 * This is just to aid testing
 */
insert into quiz (name) values ('Cats'), ('Dogs'), ('Snakes');
`
  );
  const pgPool = new pg.Pool({
    connectionString: `$(PgConnectionString)/graphile_org_demo`,
  });
  const getPostGraphileSchemaWithOptions = (options = {}, client = pgPool) =>
    createPostGraphileSchema(client, ["app_public"], {
      dynamicJson: true,
      ...options,
      appendPlugins: [
        PgSimplifyInflectorPlugin,
        ...(options.appendPlugins || []),
      ],
    });
  try {
    const postgraphileSchema = await getPostGraphileSchemaWithOptions({});
    const queryPath = `${__dirname}/../examples`;
    const categories = fs
      .readdirSync(queryPath)
      .filter(dir => fs.statSync(`${queryPath}/${dir}`).isDirectory())
      .filter(dir => fs.existsSync(`${queryPath}/${dir}/config.js`))
      .sort();

    const examples = [];

    for (const category of categories) {
      const sectionPath = `${queryPath}/${category}`;
      const {
        fileFilter,
        processFile,
        filenameToSectionTitle = filenameToTitle,
        filenameToExampleTitle = filenameToTitle,
      } = require(`${sectionPath}/config.js`);
      const sections = fs
        .readdirSync(sectionPath)
        .filter(dir => fs.statSync(`${sectionPath}/${dir}`).isDirectory())
        .sort();

      for (const dir of sections) {
        const titleFromFile = null;
        const currentExample = {
          category: category,
          title: titleFromFile || filenameToSectionTitle(dir),
          examples: [],
        };
        examples.push(currentExample);
        const dirPath = `${sectionPath}/${dir}`;
        const queries = fs
          .readdirSync(dirPath)
          .filter(fileFilter)
          .sort();
        for (const exampleFilename of queries) {
          const exampleFilePath = `${dirPath}/${exampleFilename}`;
          //const id = `${dir}__${exampleFilename}`;
          const {
            example,
            exampleLanguage,
            result,
            resultLanguage,
            title,
          } = await processFile(exampleFilePath, {
            pgPool,
            postgraphileSchema,
            prettify,
            graphql,
            withPostGraphileContext,
            getPostGraphileSchemaWithOptions,
          });
          currentExample.examples.push({
            title:
              title ||
              filenameToExampleTitle(
                exampleFilename.replace(/\.(graphql|sql|js|ts)$/, "")
              ),
            example,
            exampleLanguage,
            result,
            resultLanguage,
          });
        }
      }
    }
    fs.writeFileSync(
      `${__dirname}/../src/data/examples.json`,
      JSON.stringify(examples, null, 2)
    );
  } finally {
    pgPool.end();
  }
}

main().then(null, error => {
  console.error(error);
  process.exit(1);
});
